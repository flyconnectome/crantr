[{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://flyconnectome.github.io/crantr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://flyconnectome.github.io/crantr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with crantr","title":"Getting help with crantr","text":"Thanks using crantr. ’re sorry ’re trouble, don’t worry, ’re help! get help quickly possible, please read following:","code":""},{"path":"https://flyconnectome.github.io/crantr/SUPPORT.html","id":"search","dir":"","previous_headings":"","what":"Search","title":"Getting help with crantr","text":"first thing see anyone problem : Search nat-user google group. Search GitHub issues crantr package. Search GitHub issues across whole natverse case problem related package. can add terms search search box top left page. solves problem, great!","code":""},{"path":"https://flyconnectome.github.io/crantr/SUPPORT.html","id":"known-problems","dir":"","previous_headings":"","what":"Known Problems","title":"Getting help with crantr","text":"need help known problem: found relevant thread nat-user google group: please reply . found GitHub issue: please reply details just like (click emoji button add thumbs ) let us know ’re trouble . ’ll need GitHub login . ’re sure: ask new question nat-user google group linking found.","code":""},{"path":"https://flyconnectome.github.io/crantr/SUPPORT.html","id":"new-problems","dir":"","previous_headings":"","what":"New Problems","title":"Getting help with crantr","text":"looks like new problem : just question: please ask nat-user google group. need report new bug: please file issue. ’re sure: please just ask nat-user google group! problem bug feature request, can easily return report - may able point existing report workaround.","code":""},{"path":"https://flyconnectome.github.io/crantr/SUPPORT.html","id":"good-questions-and-bug-reports","dir":"","previous_headings":"","what":"Good Questions and Bug Reports","title":"Getting help with crantr","text":"specific Include code triggered problem possible, make minimal reproducible example (reprex) much easier us help can run reprex machine without data. might want use sample data nat package help, refer publicly available data online. can use reprex package help prepare reprex. Read Get help! section tidyverse site information. Thanks help!","code":""},{"path":"https://flyconnectome.github.io/crantr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Bates. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/crantr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bates (2025). crantr: R Client Access Clonal Raider ANT (CRANT) Datasets. R package version 0.1.0, https://github.com/flyconnectome/crantr.","code":"@Manual{,   title = {crantr: R Client Access to Clonal Raider ANT (CRANT) Datasets},   author = {Alexander Bates},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/flyconnectome/crantr}, }"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"crantr","dir":"","previous_headings":"","what":"R Client Access to Clonal Raider ANT (CRANT) Datasets","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"crantr R package designed support analysis connectome data sets clonal raider ant (Ooceraea biroi, formerly Cerapachys biroi). package primarily focuses proofread auto-segmentation data CRANT (Clonal Raider Ant) project. project founded collaboration laboratories Wei-Chung Allen Lee, Daniel Kronauer Hannah Haberkern, among others. project community based CRANT slack.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"about-clonal-raider-ants","dir":"","previous_headings":"","what":"About Clonal Raider Ants","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"Clonal raider ants (Ooceraea biroi) fascinating species ant known unique reproductive biology social structure: reproduce clonally via parthenogenesis. lack queen caste, workers colony lay eggs. exhibit complex social behaviors, including division labor, chemical communication, cooperative parental care. possible make mutant transgenic ants explore neural genetic basis behaviors. characteristics make clonal raider ants excellent model system studying neural basis social behavior evolution eusociality insects.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"current-data-availability","dir":"","previous_headings":"","what":"Current Data Availability","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"present, connectome data one brain available: CRANTb, represents brain worker clonal raider ant.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"package-features","dir":"","previous_headings":"","what":"Package Features","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"crantr package serves wrapper fafbseg package, wrapper adds: Setup necessary default paths / data redirects. Integration CAVE tables storing various annotation information. Relevant helper functions called bancr package. CRANT project specific data wrangling browsing code.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"can install development version crantr GitHub:","code":"remotes::install_github('flyconnectome/crantr') remotes::install_github('natverse/fafbseg@asb-dev')"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"authorisation","dir":"","previous_headings":"Installation","what":"Authorisation","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"use crantr package, need authorisation access CRANT resources. Follow steps set access CAVE token, given authorisation:","code":"# Set up token - will open your browser to generate a new token crant_set_token()  # If you already have a token: # crant_set_token(\"<my token>\")"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"verifying-setup","dir":"","previous_headings":"Installation","what":"Verifying Setup","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"ensure everything set correctly, run:","code":"# Diagnose issues fafbseg::dr_fafbseg()  # Confirm functionality crant_islatest(\"576460752684030043\")"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"python-dependencies","dir":"","previous_headings":"Installation","what":"Python Dependencies","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"functions rely underlying Python code. install full set recommended libraries, including fafbseg-py, run: encounter errors related cloud-volume, update :","code":"fafbseg::simple_python(\"full\") fafbseg::simple_python('none', pkgs='cloud-volume~=8.32.1')"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"Use with_crant() wrap additional fafbseg::flywire_* functions use CRANT data. Alternatively, use choose_crant() set flywire_* functions fafbseg target CRANT. Example:","code":"library(crantr) choose_crant()  # Your analysis code here"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"updating","dir":"","previous_headings":"","what":"Updating","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"update package dependencies: update specific Python library dependency:","code":"remotes::install_github('flyconnectome/crantr') fafbseg::simple_python(pkgs='fafbseg')"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"tutorial","dir":"","previous_headings":"","what":"Tutorial","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"One initial projects CRANTb dataset explore olfactory system ant, led Lindsey E Lopes Laboratoy Social Evolution Behavior. Let us look antennal lobe projection neurons. collaborator project access seatable, can : , neuron IDs get started: Now can read mesh data reconstructions plot together surface model CRANTb brain, using rgl! can also make plot 2D, popular ggplot2 framework. Sometimes also useful work skeletons, example NBLASTing neurons. can swiftly fetch L2 skeletons neuron, built super-voxel locations using python library pcg_skel, :","code":"# load library library(crantr)  # get meta data, will one dya be available via CAVE tables ac <- crant_table_query()  # have a look at it! View(ac)  # filter to get our IDs pn.meta <- ac %>%   dplyr::filter(cell_class==\"olfactory_projection_neuron\")  # get our ids pn.ids <- unique(pn.meta$root_id) # load library library(crantr)  # specify IDs to examine, could also be gotten from a CAVE table pn.ids <- c(\"576460752684030043\", \"576460752688452399\", \"576460752688452655\",  \"576460752666304186\", \"576460752683636730\", \"576460752724736013\")  # update these IDs to their most current versions, they change after each proofreading edit pn.ids <- crant_latestid(pn.ids) # fetch pn.meshes <- crant_read_neuron_meshes(pn.ids)  # plot brain crant_view() plot3d(crantb.surf, col = \"lightgrey\", alpha = 0.1)  # plot neurons plot3d(pn.meshes) # ggplot crant_ggneuron(pn.meshes , volume = crantb.surf) # fetch pn.skels <- crant_read_l2skel(pn.ids)  # plot brain nopen3d() crant_view() plot3d(crantb.surf, col = \"lightgrey\", alpha = 0.1)  # plot neurons plot3d(pn.skels, lwd = 1)"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"meta-data-management-in-seatable","dir":"","previous_headings":"","what":"Meta data management in seatable","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"Seatable powerful way make collaborative annotations connectome dataset encourage use rather keeping google sheets similar track neurons. works similarly google sheets, better filter views, data type management, programmatic access, etc. work browser app. See seatable . link work can request access contacting Lindsey Lopes. row CRANTb neuron. hover tool-tip icon column header, can see column records. neuron identified unique 16-digit integer root_id, modified time neuron edited. CRANTb active project, happens frequently seatable needs keep track changes, daily schedule. update logic position (voxel space) -> supervoxel_id -> root_id. position supervoxel_id missing, root_id updated directly longer. also take date root_id number voxels previous root_id, neuron split incorrect choice. Updating position gives neuron position, regardless size, merges splits. Best practice add position always can, root_id addition want. may want add root_id alone want track neuron yet good position . good position point neuron expect change proofreading, e.g. first branch point neuron splits primary neurite axon dendrite. can access seatable programmatically using crantr, access. first need obtain authorised login credentials, need : may read data, make nice plots ! can also update rows automatically. careful . want sure mess something , can take ‘snapshot’ seatable edit browser, save historical version. can change columns ac, keeping names, like. update via R: update, must seatable identifier column ac.new, .e. _id column. method good bulk uploads/changes. can also make quick, simpler update, replacing one column’s entries given update set root IDs.","code":"remotes::install_github('flyconnectome/crantr') library(crantr) crant_table_set_token(user=\"MY_EMAIL_FOR_SEATABLE\",                pwd=\"MY_SEATABLE_PASSWORD\",                url=\"https://cloud.seatable.io/\") # Read BANC meta seatable ac <- crant_table_query() # Update crant_table_update_rows(base=\"CRANTb\",                       table = \"CRANTb_meta\",                       df = ac.new,                       append_allowed = FALSE,                       chunksize = 100) crant_table_annotate(root_ids = c(\"576460752667713229\",                                \"576460752662519193\",                                \"576460752730083020\",                                \"576460752673660716\",                                \"576460752662521753\"),                   update = \"lindsey_lopes\",                   overwrite = FALSE,                   append = FALSE,                   column = \"user_annotator\")"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"data-acknowledgment","dir":"","previous_headings":"","what":"Data Acknowledgment","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"using CRANT data, please acknowledge accordance CRANT community guidelines agreement CRANT consortium.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"citations","dir":"","previous_headings":"","what":"Citations","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"use package, please cite: upcoming CRANT paper (TBD) natverse paper: Bates et al. 2020 R package: Bates (2024). crantr: R Client Access Brain Nerve Cord (CRANT) Dataset. R package version 0.1.0, https://github.com/flyconnectome/crantr.","code":"citation(package = \"crantr\")"},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"CRANTb data set: Lindsey E. Lopes David G.C. Hildebrand prepared clonal raider ant brain sample. EM dataset collected Harvard Medical School laboratory Wei-Chung Allen Lee, Wangchu Xiang, Mohd Mazri, Lindsey E. Lopes. Segmentation synapse prediction: Built Zetta.ai. Neuron reconstruction: Hosted supported laboratory Wei-Chung Allen Lee Harvard Medical School, laboratory Hannah Haberkern University Würzburg, Laboratory Social Evolution Behavior Rockefeller University. R package: Initialized using fancr package developed Greg Jefferis MRC Laboratory Molecular Biology, Cambridge, UK. Development: Alexander S. Bates worked R package laboratory Rachel Wilson Harvard Medical School.","code":""},{"path":"https://flyconnectome.github.io/crantr/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"R Client Access to Clonal Raider ANT (CRANT) Datasets","text":"Bates, Alexander Shakeel, James D. Manton, Sridhar R. Jagannathan, Marta Costa, Philipp Schlegel, Torsten Rohlfing, Gregory SXE Jefferis. 2020. Natverse, Versatile Toolbox Combining Analysing Neuroanatomical Data. eLife 9 (April). https://doi.org/10.7554/eLife.53350.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/choose_crant.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","title":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","text":"Choose (temporarily) use CRANT autosegmentation","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/choose_crant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","text":"","code":"choose_crant(set = TRUE)  with_crant(expr)"},{"path":"https://flyconnectome.github.io/crantr/reference/choose_crant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","text":"set Whether permanently set CRANT auto-segmentation default fafbseg functions. expr expression evaluate CRANT default autosegmentation","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/choose_crant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","text":"set=TRUE list containing previous values relevant global options (style options. set=FALSE named list containing option values.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/choose_crant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose or (temporarily) use the CRANT autosegmentation — choose_crant","text":"bancr inherits significant amount infrastructure fafbseg package. concept active autosegmentation, turn defines one R options containing URLs pointing voxel-wise segmentation, mesh etc data. normally contained within single neuroglancer URL points multiple data layers. banc neuroglancer scene returned crant_scene.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_add_synapses.html","id":null,"dir":"Reference","previous_headings":"","what":"Add synapses to neuron objects — crant_add_synapses","title":"Add synapses to neuron objects — crant_add_synapses","text":"function family adds synaptic data neuron objects neuron lists. retrieves synaptic connections attaches neuron object(s).","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_add_synapses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add synapses to neuron objects — crant_add_synapses","text":"","code":"crant_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # S3 method for class 'neuron' crant_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # S3 method for class 'neuronlist' crant_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )  # Default S3 method crant_add_synapses(   x,   id = NULL,   connectors = NULL,   size.threshold = 5,   remove.autapses = TRUE,   update.id = TRUE,   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_add_synapses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add synapses to neuron objects — crant_add_synapses","text":"x neuron object, neuronlist, object add synapses id root ID neuron. NULL, uses ID neuron object connectors dataframe synaptic connections. NULL, retrieves data size.threshold Minimum size threshold synapses include remove.autapses Whether remove autapses (self-connections) update.id Logical, whether use crant_latestid update neuron's root_id fetching synapses. ... Additional arguments passed methods, nat::nlapply","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_add_synapses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add synapses to neuron objects — crant_add_synapses","text":"object type x, synapses added","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_add_synapses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add synapses to neuron objects — crant_add_synapses","text":"","code":"if (FALSE) { # \\dontrun{ # Get CRANT ID for a olfactory PN id <- \"720575941572711675\" id <- crant_latestid(id)  # Get the L2 skeletons n <- crant_read_l2skel(id)  # Re-root to soma n.rerooted <- crant_reroot(n)  # Add synapse information, stored at n.syn[[1]]$connectors n.syn <- crant_add_synapses(n.rerooted)  # Split neuron n.split <- hemibrainr::flow_centrality(n.syn)  } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level access to crant's CAVE annotation infrastructure — crant_cave_client","title":"Low level access to crant's CAVE annotation infrastructure — crant_cave_client","text":"Low level access crant's CAVE annotation infrastructure","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level access to crant's CAVE annotation infrastructure — crant_cave_client","text":"","code":"crant_cave_client()"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level access to crant's CAVE annotation infrastructure — crant_cave_client","text":"reticulate R object wrapping python CAVEclient.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level access to crant's CAVE annotation infrastructure — crant_cave_client","text":"","code":"if (FALSE) { # \\dontrun{ fcc=crant_cave_client() tables=fcc$annotation$get_tables() fcc$materialize$get_table_metadata(tables[1]) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query CRANT tables in the CAVE annotation system — crant_cave_query","title":"Query CRANT tables in the CAVE annotation system — crant_cave_query","text":"Query CRANT tables CAVE annotation system","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query CRANT tables in the CAVE annotation system — crant_cave_query","text":"","code":"crant_cave_query(table, live = 2, ...)  crant_backbone_proofread(...)  crant_version()"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query CRANT tables in the CAVE annotation system — crant_cave_query","text":"table name table (view, see views section) query live Whether use live query mode, updates root ids current value (another timestamp provided). Values TRUE 1 select CAVE's Live mode, 2 selects Live live mode gives access even annotations part materialisation version. See section Live Live Live queries details. ... Additional arguments passed flywire_cave_query flywire_cave_query","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query CRANT tables in the CAVE annotation system — crant_cave_query","text":"data.frame","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query CRANT tables in the CAVE annotation system — crant_cave_query","text":"","code":"if (FALSE) { # \\dontrun{ backbone.proofread=crant_cave_query('backbone_proofread') View(backbone.proofread) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","title":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","text":"Read CRANT CAVE-tables, good sources metadata","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","text":"","code":"crant_cave_tables(datastack_name = \"kronauer_ant\", select = NULL, ...)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","text":"datastack_name Defaults \"kronauer_ant\" .e. CRANTb. select regex term name table want ... Additional arguments passed fafbseg::flywire_cave_query","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","text":"data.frame describing CAVE-table related CRANT project. case crant_cave_tables, vector returned containing names query-able cave tables.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_cave_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CRANT CAVE-tables, good sources of metadata — crant_cave_tables","text":"","code":"if (FALSE) { # \\dontrun{ all_crant_soma_positions <- crant_nuclei() points3d(nat::xyzmatrix(all_crant_soma_positions$pt_position))  # Another way to query a specific table crant_backbone_proofread <- with_crant(bancr:::get_cave_table_data(\"backbone_proofread\")) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch change log information for one or more neurons — crant_change_log","title":"Fetch change log information for one or more neurons — crant_change_log","text":"Fetch change log information one neurons","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch change log information for one or more neurons — crant_change_log","text":"","code":"crant_change_log(x, tz = \"UTC\", filtered = TRUE, OmitFailures = TRUE, ...)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch change log information for one or more neurons — crant_change_log","text":"x One crant ids format understandable ngl_segments tz Time zone edit timestamps. Defaults \"UTC\" .e. Universal Time, Coordinated. Set \"\" current timezone. See .POSIXct details. filtered Whether filter edits unlikely relate current state neuron (default TRUE, see details). OmitFailures Whether omit neurons API timeout error. default value (TRUE) skip errors, NA) result hard stop error. See nlapply details. ... Additional arguments passed flywire_fetch","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch change log information for one or more neurons — crant_change_log","text":"data.frame See fabseg::flywire_change_log details","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch change log information for one or more neurons — crant_change_log","text":"August 2021 simple wrapper fafbseg::flywire_change_log. now old (less convenient format) available zetta API can obtained private crantr:::crant_change_log_zetta function.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_change_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch change log information for one or more neurons — crant_change_log","text":"","code":"if (FALSE) { # \\dontrun{ crant_change_log(x=\"576460752684030043\") } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ggneuron.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","title":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","text":"function visualizes neuron neuron-related object CRANT connectomic dataset using ggplot2. thing specific CRANT data set prreset 'view' angles.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ggneuron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","text":"","code":"crant_ggneuron(   x,   volume = NULL,   info = NULL,   view = c(\"front\", \"side\", \"back\"),   cols1 = c(\"turquoise\", \"navy\"),   cols2 = c(\"grey75\", \"grey50\"),   alpha = 0.5,   title.col = \"darkgrey\",   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ggneuron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","text":"x 'neuron', 'neuronlist', 'mesh3d', 'hxsurf' object visualized. volume brain/neuropil volume plotted grey, context. Defaults NULL, volume plotted. info Optional. string used plot title. view character string specifying view orientation. Options \"front\", \"side\", \"back\". cols1 vector two colors lowest Z values. Default c(\"turquoise\", \"navy\"). cols2 vector two colors highest Z values. Default c(\"grey75\", \"grey50\"). alpha Transparency neuron visualization. Default 0.5. title.col Color plot title. Default \"darkgrey\". ... Additional arguments passed geom_neuron().","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ggneuron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","text":"ggplot object representing visualized neuron.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ggneuron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a neuron in the CRANT connectomic dataset using ggplot2 — crant_ggneuron","text":"function wrapper around ggneuron function, specifically tailored CRANT dataset. applies rotation matrix based specified view uses predefined color schemes.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sure given root IDs look like CRANT root IDs — crant_ids","title":"Make sure given root IDs look like CRANT root IDs — crant_ids","text":"Make sure given root IDs look like CRANT root IDs","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sure given root IDs look like CRANT root IDs — crant_ids","text":"","code":"crant_ids(x, integer64 = NA)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sure given root IDs look like CRANT root IDs — crant_ids","text":"x data.frame, URL vector ids integer64 Whether return ids bit64::integer64 character vectors. Default value NA leaves ids unmodified.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_islatest.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a CRANT root id is up to date — crant_islatest","title":"Check if a CRANT root id is up to date — crant_islatest","text":"Check CRANT root id date","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_islatest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a CRANT root id is up to date — crant_islatest","text":"","code":"crant_islatest(x, timestamp = NULL, ...)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_islatest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a CRANT root id is up to date — crant_islatest","text":"x FlyWire rootids format understandable ngl_segments including integer64 timestamp (optional) argument set endpoint - edits time ignored (see details). ... Additional arguments passed flywire_islatest","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_islatest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a CRANT root id is up to date — crant_islatest","text":"","code":"crant_islatest(\"576460752684030043\") #> Error : Unable to find chunked graph credentials! #> Please set by doing: #>   flywire_set_token()/fanc_set_token() etc  #> For further details see: #> https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson #> Error in crant_scene(): It looks like you do not have a stored token. Please use `flywire_set_token()` to make one.Note you may have to do this in addition to `crantr_set_token()`"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_latestid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the latest id for a CRANT root id — crant_latestid","title":"Find the latest id for a CRANT root id — crant_latestid","text":"Find latest id CRANT root id","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_latestid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the latest id for a CRANT root id — crant_latestid","text":"","code":"crant_latestid(   rootid,   sample = 1000L,   cloudvolume.url = NULL,   Verbose = FALSE,   ... )  crant_updateids(   x,   root.column = \"root_id\",   supervoxel.column = \"supervoxel_id\",   position.column = \"position\",   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_latestid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the latest id for a CRANT root id — crant_latestid","text":"rootid One ore FlyWire rootids defining segment (form interpretable ngl_segments) sample absolute fractional number supervoxel ids map rootids FALSE (see details). cloudvolume.url URL CloudVolume fetch segmentation image data. default value NULL chooses flywire production segmentation dataset. Verbose set TRUE prints information fraction ... Additional arguments passed flywire_latestid x data.frame least one : root_id, pt_root_id, supervoxel_id /pt_supervoxel_id. Supervoxels preferentially used update root_id column. Else vector CRANT root IDs. root.column x data.frame, root_id column wish update supervoxel.column x data.frame, supervoxel_id column wish use update root.column position.column x data.frame, position column xyz values wish use update supervoxel.column","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_latestid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the latest id for a CRANT root id — crant_latestid","text":"","code":"if (FALSE) { # \\dontrun{ crant_latestid(\"576460752684030043\") } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","title":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","text":"Find supervoxel identifiers CRANT neuron","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","text":"","code":"crant_leaves(x, integer64 = TRUE, ...)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (default, compact little fragile) rather character (FALSE). ... additional arguments passed flywire_leaves","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","text":"vector supervoxel ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the supervoxel identifiers of a CRANT neuron — crant_leaves","text":"","code":"if (FALSE) { # \\dontrun{ svids=crant_leaves(\"576460752684030043\") head(svids) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Query cached CRANTb meta data — crant_meta","title":"Query cached CRANTb meta data — crant_meta","text":"Returns results -memory cache, filtered ids given. Cache must created first using crant_meta_create_cache().","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query cached CRANTb meta data — crant_meta","text":"","code":"crant_meta(ids = NULL)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query cached CRANTb meta data — crant_meta","text":"ids Vector neuron/root IDs select, NULL .","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query cached CRANTb meta data — crant_meta","text":"tibble/data.frame, possibly filtered ids.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query cached CRANTb meta data — crant_meta","text":"crant_meta() never queries databases directly. ids given, filters meta table root_id.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query cached CRANTb meta data — crant_meta","text":"","code":"if (FALSE) { # \\dontrun{ crant_meta_create_cache() # build the cache all_meta <- crant_meta()  # retrieve all } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"crant_meta_create_cache() builds refreshes -memory cache CRANTb metadata efficient repeated lookups. can choose data source using use_seatable. main accessor function crant_meta() always use recently created cache.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"","code":"crant_meta_create_cache(use_seatable = FALSE, return = FALSE)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"use_seatable Whether build CRANTb meta data cell_info CAVE table (production) internal seatable (development). require different types authenticated access, details see crantr documentation. return Logical; TRUE, return cache tibble/invisible.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"Invisibly returns cache (data.frame) return=TRUE; otherwise invisibly NULL.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"CRANTb meta queries can slow; caching avoids repeated computation/database access. Whenever labels updated, simply rerun function update cache.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_meta_create_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or refresh cache of CRANTb meta information — crant_meta_create_cache","text":"","code":"if (FALSE) { # \\dontrun{ #' # Requires authenticated access to CRANTb CAVE crant_meta_cache(use_seatable=FALSE)  crant_meta_create_cache(use_seatable=TRUE) # create cache ## CRANTbTABLE_TOKEN must be set, see crantr package result <- crant_meta() # use cache  # use cache to quickly make plot library(coconatfly) register_crant_coconat() cf_cosine_plot(cf_ids('/type:NSC', datasets = c(\"crant\", \"flywire\"))) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"Returns synaptically connected partners specified neurons. Understanding synaptic partnerships crucial analyzing neural circuits CRANTb connectome. crant_partners returns details unitary synaptic connection (including xyz location).","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"","code":"crant_partner_summary(   rootids,   partners = c(\"outputs\", \"inputs\"),   synapse_table = c(\"synapses_v2\"),   threshold = 0,   remove_autapses = TRUE,   cleft.threshold = 0,   datastack_name = NULL,   ... )  crant_partners(   rootids,   partners = c(\"input\", \"output\"),   synapse_table = c(\"synapses_v2\"),   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"rootids Character vector specifying one crant rootids. convenience argument passed crant_ids allowing pass data.frames, crant URLs simple ids. partners Character vector, either \"outputs\" \"inputs\" specify direction synaptic connections retrieve. synapse_table Character, name synapse CAVE table wish use. Defaults latest. threshold Integer threshold minimum number synapses (default 0). remove_autapses Logical, whether remove self-connections (default TRUE). cleft.threshold Numeric threshold cleft filtering (default 0). datastack_name optional CAVE datastack_name. unset sensible default chosen. ... Additional arguments passed flywire_partner_summary","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"data.frame","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"note rootids pass must date. See example.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_partner_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the connectivity of CRANTb neurons — crant_partner_summary","text":"","code":"if (FALSE) { # \\dontrun{ # Basic connectivity analysis sample_id=crant_latestid(\"576460752716912866\") head(crant_partner_summary(sample_id)) head(crant_partner_summary(sample_id, partners='inputs')) } # } if (FALSE) { # \\dontrun{ # plot input and output synapses of a neuron nclear3d() fpi=crant_partners(crant_latestid(\"576460752716912866\"), partners='in') points3d(crant_raw2nm(fpi$post_pt_position), col='cyan') fpo=crant_partners(crant_latestid(\"576460752716912866\"), partners='out') points3d(crant_raw2nm(fpo$pre_pt_position), col='red') } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":null,"dir":"Reference","previous_headings":"","what":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"function reads level 2 (L2) node data neuron segmentations crant ant brain connectome dataset. uses pcg_skel Python library create skeleton object, converted nat neuron object R.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"","code":"crant_read_l2skel(   ids,   OmitFailures = TRUE,   datastack_name = crant_datastack_name(),   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"ids vector one neuron segment IDs read. OmitFailures Logical; TRUE, segments fail read omitted results without error (default=TRUE). datastack_name optional CAVE dataset name (expert use , default choose standard crant dataset). See details. ... Additional arguments passed internal functions.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"neuronlist containing one neuron objects. Note neurons calibrated nanometers (nm).","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"crant_read_l2skel works : Validating input IDs using crant_ids. Using pcg_skel generate skeleton neuron segment. Converting pcg_skel skeleton SWC format DataFrame. Converting SWC DataFrame nat neuron object. function relies pcg_skel Python library (https://github.com/AllenInstitute/pcg_skel) skeleton generation. Ensure pcg_skel installed Python environment.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"pcg_skel Python library: https://github.com/AllenInstitute/pcg_skel","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_l2skel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read L2 skeleton for crant neurons using pcg_skel — crant_read_l2skel","text":"","code":"if (FALSE) { # \\dontrun{ # One-time installation of necessary Python packages fafbseg::simple_python('none', pkgs='numpy~=1.23.5') fafbseg::simple_python(pkgs=\"pcg_skel\")  # Read a single neuron ant.neuron <- crant_read_l2skel(\"576460752653449509\")  # Plot the neuron plot3d(ant.neuron)  # Plot with crant surface (assuming crant.surf is available) plot3d(crant.surf, alpha = 0.1, col = \"lightgrey\") } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuroglancer_mesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","title":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","text":"Read CRANT neuroglancer meshes, e.g., ROI meshes","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuroglancer_mesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","text":"","code":"crant_read_neuroglancer_mesh(   x = 1,   url = paste0(\"https://www.googleapis.com/storage/v1/b/\",     \"dkronauer-ant-001-alignment-final/o/tissue_mesh%2F\",     \"mesh%2Ftissue_mesh.frag?alt=media\",     \"&neuroglancer=a2b0cf07baf8c501891d6c683cc7e24a\"),   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuroglancer_mesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","text":"x numeric identifier specifies mesh read, defaults 1 CRANTb outline mesh. url URL directs bancr CRANT meshes stored. ... additional arguments GET","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuroglancer_mesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","text":"mesh3d object specified mesh.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuroglancer_mesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CRANT neuroglancer meshes, e.g., ROI meshes — crant_read_neuroglancer_mesh","text":"","code":"if (FALSE) { # \\dontrun{ # default is brain mesh crant.mesh  <- crant_read_neuroglancer_mesh() } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuron_meshes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","title":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","text":"Read one CRANT neuron nuclei meshes","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuron_meshes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","text":"","code":"crant_read_neuron_meshes(ids, savedir = NULL, format = c(\"ply\", \"obj\"), ...)  crant_read_nuclei_mesh(   ids,   lod = 0L,   savedir = NULL,   method = c(\"vf\", \"ply\"),   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuron_meshes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","text":"ids One root ids savedir optional location save downloaded meshes. acts simple effective cache since flywire neurons change id whenever edited. format whether save meshes Wavefront obj Stanford poly format. obj default ply simpler compact format. ... Additional arguments passed fafbseg::read_cloudvolume_meshes lod level detail (highest resolution 0, default 2 gives good overall morphology 3 also useful smaller still). method treat mesh object returned neuroglancer, .e. mesh3d object ply mesh.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuron_meshes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","text":"neuronlist containing one mesh3d objects. See nat::read.neurons details.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_read_neuron_meshes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more CRANT neuron and nuclei meshes — crant_read_neuron_meshes","text":"","code":"if (FALSE) { # \\dontrun{ neuron.mesh <- crant_read_neuron_meshes(\"576460752653449509\") plot3d(neuron.mesh, alpha = 0.1) nucleus.mesh <- crant_read_nuclei_mesh(\"72198744581344126\") plot3d(nucleus.mesh, col = \"black\") } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_rootid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root identifier of a CRANT neuron — crant_rootid","title":"Find the root identifier of a CRANT neuron — crant_rootid","text":"Find root identifier CRANT neuron","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_rootid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root identifier of a CRANT neuron — crant_rootid","text":"","code":"crant_rootid(x, integer64 = FALSE, ...)"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_rootid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root identifier of a CRANT neuron — crant_rootid","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (compact little fragile) rather character (default FALSE). ... Additional arguments passed pbapply::pbsapply eventually Python cv$CloudVolume object.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_rootid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root identifier of a CRANT neuron — crant_rootid","text":"vector root ids (default character)","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_rootid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root identifier of a CRANT neuron — crant_rootid","text":"","code":"# \\donttest{ crant_rootid(\"576460752684030043\") #> Error : Unable to find chunked graph credentials! #> Please set by doing: #>   flywire_set_token()/fanc_set_token() etc  #> For further details see: #> https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson #> Error in crant_scene(): It looks like you do not have a stored token. Please use `flywire_set_token()` to make one.Note you may have to do this in addition to `crantr_set_token()` # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","title":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","text":"Return sample Neuroglancer scene URL crant dataset","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","text":"","code":"crant_scene(   ids = NULL,   open = FALSE,   shorten_url = FALSE,   layer = \"proofreadable seg\",   url = paste0(\"https://spelunker.cave-explorer.org/#!middleauth+\",     \"https://global.daf-apis.com/nglstate/api/v1/\", \"5733498854834176\") )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","text":"ids set root ids include scene. Can also data.frame. open Whether open URL browser (see browseURL) shorten_url logical, whether produce shortened URL. layer segmentation layer ids intended. Defaults 'segmentation proofreading', point another dataset layer. url spelunker neuroglancer URL.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_scene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","text":"character vector containing single Neuroglancer URL (invisibly open=TRUE).","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a sample Neuroglancer scene URL for crant dataset — crant_scene","text":"","code":"if (FALSE) { # \\dontrun{ browseURL(crant_scene()) crant_scene(open=T) crant_scene(\"576460752653449509\", open=T) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_set_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the token to be used to authenticate to CRANT autosegmentation resources — crant_set_token","title":"Set the token to be used to authenticate to CRANT autosegmentation resources — crant_set_token","text":"Set token used authenticate CRANT autosegmentation resources","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_set_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the token to be used to authenticate to CRANT autosegmentation resources — crant_set_token","text":"","code":"crant_set_token(token = NULL, domain = \"https://proofreading.zetta.ai\")"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_set_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the token to be used to authenticate to CRANT autosegmentation resources — crant_set_token","text":"token optional token string. missing prompted generate new token via browser. domain domain CAVE token valid, .e. project hosted.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_set_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the token to be used to authenticate to CRANT autosegmentation resources — crant_set_token","text":"path token file (invisibly)","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_table_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write to the seatable for draft CRANT annotations — crant_table_query","title":"Read and write to the seatable for draft CRANT annotations — crant_table_query","text":"functions use logic wrap code flytable_.* functions fafbseg R package. crant_table_set_token obtain store permanent seatable user-level API token. crant_table_query performs SQL query crant_table database. can omit base argument unless tables name different bases. crant_table_base returns base object (equivalent mysql database) allows access one tables, logging service necessary. returned base object give full access Python Base API allowing range row/column manipulations. crant_table_update_rows updates existing rows table, returning TRUE success.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_table_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write to the seatable for draft CRANT annotations — crant_table_query","text":"","code":"crant_table_query(   sql = \"SELECT * FROM CRANTb_meta\",   limit = 200000L,   base = \"CRANTb\",   python = FALSE,   convert = TRUE,   ac = NULL,   workspace_id = \"62919\",   token_name = \"CRANTTABLE_TOKEN\" )  crant_table_set_token(   user,   pwd,   url = \"https://cloud.seatable.io/\",   token_name = \"CRANTTABLE_TOKEN\" )  crant_table_login(   url = \"https://cloud.seatable.io/\",   token = Sys.getenv(\"CRANTTABLE_TOKEN\", unset = NA_character_) )  crant_table_update_rows(   df,   table = \"CRANTb_meta\",   base = \"CRANTb\",   append_allowed = FALSE,   chunksize = 1000L,   workspace_id = \"62919\",   token_name = \"CRANTTABLE_TOKEN\",   ... )  crant_table_append_rows(   df,   table,   base = NULL,   chunksize = 1000L,   token_name = \"CRANTTABLE_TOKEN\",   workspace_id = \"62919\",   ... )  crant_table_updateids(table = \"CRANTb_meta\", base = \"CRANTb\")  crant_table_annotate(   root_ids,   update,   overwrite = FALSE,   append = FALSE,   column = \"notes\",   table = \"CRANTb_meta\",   base = \"CRANTb\",   workspace_id = \"62919\",   token_name = \"CRANTTABLE_TOKEN\" )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_table_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write to the seatable for draft CRANT annotations — crant_table_query","text":"sql SQL query string. See examples seatable docs. limit optional limit, applies specify limit directly sql query. default seatable limits SQL queries 100 rows. increase limit 100000 rows default. base Character vector specifying base python Logical. Whether return Python pandas DataFrame. default FALSE returns R data.frame convert Expert use : Whether allow Python seatable module process raw output database. principally debugging purposes. NB imposes requirement seatable_api >=2.4.0. ac seatable connection object returned crant_table_login. workspace_id numeric id specifying workspace. Advanced use token_name name token .Renviron file, CRANTTABLE_TOKEN. user, pwd crant_table user password used crant_table_set_token obtain token url Optional URL server token normally retrieved CRANTTABLE_TOKEN environment variable. df data.frame containing data upload including _id column can identify row remote table. table Character vector specifying table foe want base object. append_allowed Logical. Whether rows without row identifiers can appended. chunksize split large requests smaller ones max many rows. ... additional arguments passed pbsapply might include cl=2 specify number parallel jobs run. root_ids CRANTb root ids update, must present seatable. update replacement entries want chosen column given root_ids. overwrite whether overwrite entries chosen column given root_ids. append overwrite==FALSE, whether append (separated ,) entries chosen column given root_ids. column column seatable update given root_ids.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_table_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write to the seatable for draft CRANT annotations — crant_table_query","text":"data.frame results. 0 rows rows matched query.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_table_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write to the seatable for draft CRANT annotations — crant_table_query","text":"","code":"if (FALSE) { # \\dontrun{ # Do this once crant_table_set_token(user=\"MY_EMAIL_FOR_SEATABLE.com\",                     pwd=\"MY_SEATABLE_PASSWORD\",                     url=\"https://cloud.seatable.io/\")  # Thereafter: crant.meta <- crant_table_query()  # A simple way to add annotations to specific neurons in the table quickly # this is just for one entry type for one chosen column crant_table_annotate(root_ids = c(\"576460752667713229\",                               \"576460752662519193\",                               \"576460752730083020\",                               \"576460752673660716\",                               \"576460752662521753\"),                  update = \"lindsey_lopes\",                  overwrite = FALSE,                  append = FALSE,                  column = \"user_annotator\") } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Default View for CRANT EM Dataset — crant_view","title":"Set Default View for CRANT EM Dataset — crant_view","text":"function sets default view visualizing 'CRANT' Electron Microscopy (EM) dataset using rgl package. adjusts viewpoint specific orientation zoom level optimal viewing particular dataset.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Default View for CRANT EM Dataset — crant_view","text":"","code":"crant_view()  crant_side_view()  crant_back_view()"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Default View for CRANT EM Dataset — crant_view","text":"function called side effect changing rgl viewpoint. return value.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Default View for CRANT EM Dataset — crant_view","text":"function uses rgl::rgl.viewpoint() set predefined user matrix zoom level. matrix defines rotation translation view, zoom parameter adjusts scale visualization.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set Default View for CRANT EM Dataset — crant_view","text":"function assumes rgl device already open CRANT EM dataset plotted. create new plot open new rgl device.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Default View for CRANT EM Dataset — crant_view","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have already plotted your CRANT EM data crant_view() } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"crant_voxdims returns image voxel dimensions normally used scale raw nm coordinates.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"","code":"crant_voxdims(url = choose_crant(set = FALSE)[[\"fafbseg.sampleurl\"]])  crant_nm2raw(x, vd = crant_voxdims())  crant_raw2nm(x, vd = crant_voxdims())"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"url Optional neuroglancer URL containing voxel size. Defaults getOption(\"fafbseg.sampleurl\") set choose_crant. x 3D coordinates form compatible xyzmatrix vd voxel dimensions nm. Expert use . Normally found automatically.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"crant_voxdims 3-vector crant_raw2nm crant_nm2raw Nx3 matrix coordinates","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"relies nat >= 1.10.4","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_voxdims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle raw and nm calibrated CRANT coordinates — crant_voxdims","text":"","code":"crant_voxdims() #> Error : Unable to find chunked graph credentials! #> Please set by doing: #>   flywire_set_token()/fanc_set_token() etc  #> For further details see: #> https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson #> Error in crant_scene(): It looks like you do not have a stored token. Please use `flywire_set_token()` to make one.Note you may have to do this in addition to `crantr_set_token()` crant_raw2nm(c(37306, 31317, 1405)) #> Error : Unable to find chunked graph credentials! #> Please set by doing: #>   flywire_set_token()/fanc_set_token() etc  #> For further details see: #> https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson #> Error in crant_scene(): It looks like you do not have a stored token. Please use `flywire_set_token()` to make one.Note you may have to do this in addition to `crantr_set_token()` crant_raw2nm('37306 31317 1405') #> Error : Unable to find chunked graph credentials! #> Please set by doing: #>   flywire_set_token()/fanc_set_token() etc  #> For further details see: #> https://github.com/seung-lab/cloud-volume#chunkedgraph-secretjson #> Error in crant_scene(): It looks like you do not have a stored token. Please use `flywire_set_token()` to make one.Note you may have to do this in addition to `crantr_set_token()` if (FALSE) { # \\dontrun{ crant_nm2raw(clipr::read_clip()) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"Convert xyz locations CRANT root supervoxel ids","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"","code":"crant_xyz2id(   xyz,   rawcoords = FALSE,   root = TRUE,   integer64 = FALSE,   fast_root = TRUE,   method = c(\"cloudvolume\", \"spine\"),   ... )"},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"xyz One xyz locations Nx3 matrix form compatible xyzmatrix including neuron mesh3d surface objects. rawcoords whether input values raw voxel indices nm root Whether return root id whole segment rather supervoxel id. integer64 Whether return ids integer64 type (compact little fragile) rather character (default FALSE). fast_root Whether use fast two-step look-procedure finding roots. strongly recommended alternative approach retained validation purposes. method Whether use spine transform-service API cloudvolume lookup. \"auto\" presently synonym \"spine\". ... additional arguments passed pbapply looking multiple positions.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"character vector segment ids, NA lookup fails.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"used slow supervoxel field spine. somewhat puzzled voxel dimensions crant. Neuroglancer clearly shows voxel coordinates 4.3x4.3x45. function, voxel coordinates must set 4.25 x-y give correct answers.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crant_xyz2id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert xyz locations to CRANT root or supervoxel ids — crant_xyz2id","text":"","code":"if (FALSE) { # \\dontrun{ # a point from neuroglancer, should map to 576460752684030043 crant_xyz2id(cbind(37306, 31317, 1405), rawcoords=TRUE) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crantb.surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified tissue surface for crant — crantb.surf","title":"Simplified tissue surface for crant — crantb.surf","text":"crantb.surf unsymmetrical normalised version dataset mesh. outline dataset nanometers. can seen neuroglancer .","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crantb.surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified tissue surface for crant — crantb.surf","text":"","code":"crantb.surf"},{"path":"https://flyconnectome.github.io/crantr/reference/crantb.surf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simplified tissue surface for crant — crantb.surf","text":"object class hxsurf (inherits list) length 4.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/crantb.surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified tissue surface for crant — crantb.surf","text":"","code":"if (FALSE) { # \\dontrun{ # Depends on nat library(nat) rgl::wire3d(crantb.surf) } # }"},{"path":"https://flyconnectome.github.io/crantr/reference/crantr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crantr: R Client Access to Clonal Raider ANT (CRANT) Datasets — crantr-package","title":"crantr: R Client Access to Clonal Raider ANT (CRANT) Datasets — crantr-package","text":"Access Clonal Raider ANT (CRANT) EM datasets, starting CRANTb focussing support autosegmentation. Organised wrapper around fafbseg bancr packages.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/crantr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"crantr: R Client Access to Clonal Raider ANT (CRANT) Datasets — crantr-package","text":"Maintainer: Alexander Bates alexander.shakeel.bates@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/register_crant_coconat.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","title":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","text":"Register CRANTb dataset coconat, natverse R package within dataset connectivity comparisons using cosine similarity.","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/register_crant_coconat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","text":"","code":"register_crant_coconat(showerror = TRUE)"},{"path":"https://flyconnectome.github.io/crantr/reference/register_crant_coconat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","text":"showerror Logically, error-silently .","code":""},{"path":"https://flyconnectome.github.io/crantr/reference/register_crant_coconat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","text":"register_crant_coconat() registers crantr-backed functionality use ","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/crantr/reference/register_crant_coconat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use CRANTb data with coconat for connectivity similarity — register_crant_coconat","text":"","code":"if (FALSE) { # \\dontrun{ library(coconatfly) library(bancr) crant_meta_create_cache(use_seatable=TRUE) banc_meta_create_cache(use_seatable=TRUE) register_crant_coconat() register_banc_coconat() cf_cosine_plot(cf_ids('/type:NSC', datasets = c(\"crant\", \"banc\"))) } # }"},{"path":"https://flyconnectome.github.io/crantr/news/index.html","id":"crantr-010","dir":"Changelog","previous_headings":"","what":"crantr 0.1.0","title":"crantr 0.1.0","text":"Initial CRAN submission.","code":""}]
