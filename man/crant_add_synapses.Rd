% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/synapses.R
\name{crant_add_synapses}
\alias{crant_add_synapses}
\alias{crant_add_synapses.neuron}
\alias{crant_add_synapses.neuronlist}
\alias{crant_add_synapses.default}
\title{Add synapses to neuron objects}
\usage{
crant_add_synapses(
  x,
  id = NULL,
  connectors = NULL,
  size.threshold = 5,
  remove.autapses = TRUE,
  update.id = TRUE,
  ...
)

\method{crant_add_synapses}{neuron}(
  x,
  id = NULL,
  connectors = NULL,
  size.threshold = 5,
  remove.autapses = TRUE,
  update.id = TRUE,
  ...
)

\method{crant_add_synapses}{neuronlist}(
  x,
  id = NULL,
  connectors = NULL,
  size.threshold = 5,
  remove.autapses = TRUE,
  update.id = TRUE,
  ...
)

\method{crant_add_synapses}{default}(
  x,
  id = NULL,
  connectors = NULL,
  size.threshold = 5,
  remove.autapses = TRUE,
  update.id = TRUE,
  ...
)
}
\arguments{
\item{x}{A neuron object, neuronlist, or other object to add synapses to}

\item{id}{The root ID of the neuron. If \code{NULL}, it uses the ID from the neuron object}

\item{connectors}{A dataframe of synaptic connections. If \code{NULL}, it retrieves the data}

\item{size.threshold}{Minimum size threshold for synapses to include}

\item{remove.autapses}{Whether to remove autapses (self-connections)}

\item{update.id}{Logical, whether or not to use \code{crant_latestid} to update the neuron's \code{root_id} when fetching synapses.}

\item{...}{Additional arguments passed to methods, \code{nat::nlapply}}
}
\value{
An object of the same type as \code{x}, with synapses added
}
\description{
This function family adds synaptic data to neuron objects or neuron lists.
It retrieves synaptic connections and attaches them to the neuron object(s).
}
\examples{
\dontrun{
# Get CRANT ID for a olfactory PN
id <- "720575941572711675"
id <- crant_latestid(id)

# Get the L2 skeletons
n <- crant_read_l2skel(id)

# Re-root to soma
n.rerooted <- crant_reroot(n)

# Add synapse information, stored at n.syn[[1]]$connectors
n.syn <- crant_add_synapses(n.rerooted)

# Split neuron
n.split <- hemibrainr::flow_centrality(n.syn)

}
}
